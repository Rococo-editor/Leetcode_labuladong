#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
#include <string.h>
#include <list>
using namespace std;



struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Codec {
public:
    
    
    void traverse_pre_se(TreeNode* root,string &str){
        if (root==nullptr)
        {
           str+="None,";
        }
        else{
            str += to_string(root->val) + ",";
            traverse_pre_se(root->left,str);
            traverse_pre_se(root->right,str);
        }
        
        
    }

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        
        string ret;
        traverse_pre_se(root,ret);
        return ret;
        
    }

    TreeNode* traverse_pre_dse(list<string>& dataArr){
        if (dataArr.front()=="None")
        {
            dataArr.erase(dataArr.begin());
            return nullptr;
        }

        TreeNode* root = new TreeNode(stoi(dataArr.front()));
        dataArr.erase(dataArr.begin());

        root->left = traverse_pre_dse(dataArr);
        root->right = traverse_pre_dse(dataArr);
        return root;
        
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        list<string> dataArr;
        string str;
        for (auto& ch:data)
        {
            if (ch==',')
            {
                dataArr.push_back(str);
                str.clear();
            }
            else{
                str.push_back(ch);
            }
            
        }
        if (!str.empty())
        {
            dataArr.push_back(str);
            str.clear();
        }
        return traverse_pre_dse(dataArr);

        
    }


};

int main()
{

     
     
     
}
