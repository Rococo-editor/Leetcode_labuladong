#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
using namespace std;


  


class Solution {
public:
    int minDistance(string word1, string word2) {
          int M = word1.length();
          int N = word2.length();
          int dp[M+1][N+1];
          for (int i = 0; i <= M; i++){dp[i][0] = i;}
          for (int j = 0; j <= N; j++){dp[0][j] = j;}
          for (int i = 1; i <= M; i++)
          {
               for (int j = 1; j <= N; j++)
               {
                   if (word1[i-1]==word2[j-1])//注意这里的下标
                   {
                         dp[i][j] = dp[i-1][j-1];//如果两个字符串中的前一个字符相等 则skip
                   }
                   else{
                         dp[i][j] = MinOfThreeInt(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+1);
                   }
                   
               }
               
          }
          return dp[M][N];
          
          
    }
    int MinOfThreeInt(int a,int b,int c){
          return min(a,min(b,c));
    }
};

int main()
{

     Solution s;
     string s1,s2;
     cin>>s1>>s2;

     cout<<s.minDistance(s1,s2)<<endl;
         
}

//输出操作
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
using namespace std;


  


class Solution {
public:
    int minDistance(string word1, string word2) {
          int M = word1.length();
          int N = word2.length();
          int dp[M+1][N+1];
          int choice[M+1][N+1];//0 skip 1 插  2 删 3 改
          for (int i = 0; i <= M; i++){dp[i][0] = i;}
          for (int j = 0; j <= N; j++){dp[0][j] = j;}
          for (int i = 1; i <= M; i++)
          {
               for (int j = 1; j <= N; j++)
               {
                   if (word1[i-1]==word2[j-1])//注意这里的下
                   {
                         dp[i][j] = dp[i-1][j-1];//如果两个字符串中的前一个字符相等 则skip
                         choice[i][j] = 0;

                   }
                   else{
                         dp[i][j] = MinOfThreeInt(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+1);
                         if (dp[i][j]==dp[i-1][j]+1)
                         {
                              choice[i][j] = 2;
                         }
                         else if (dp[i][j]==dp[i][j-1]+1)
                         {
                              choice[i][j] = 1;
                         }
                         else if (dp[i][j]==dp[i-1][j-1]+1)
                         {
                              choice[i][j] = 3;
                         }
                         else{}                       
                         
                   }
                   
               }
               
          }

          for (int i = 1; i <= M; i++)
          {
               for (int j = 1; j <= N; j++)
               {
                   cout<<dp[i][j]<<" ";
                   
               }cout<<endl;
               
          }
          cout<<endl;
          for (int i = 1; i <= M; i++)
          {
               for (int j = 1; j <= N; j++)
               {
                   cout<<choice[i][j]<<" ";
                   
               }cout<<endl;
               
          }
          cout<<endl;
          int i=M;
          int j=N;
          while (i!=0&&j!=0)//输出操作过程 默认可能是逆序 但正序逆序的操作对于最终结果没影响
          {
               if (choice[i][j]==0)
               {
                    //cout<<"skip "<<word1[i-1]<<endl;
                    i--;j--;
               }
               else if (choice[i][j]==1)
               {
                    cout<<"insert "<<word2[j-1]<<endl;
                    j--;
               }
               else if (choice[i][j]==2)
               {
                    cout<<"delete "<<word1[i-1]<<endl;
                    i--;
               }
               else if (choice[i][j]==3)
               {
                    cout<<"modified "<<word1[i-1]<<" to "<<word2[j-1]<<endl;
                    i--;j--;
               }
               else{

               }          
          }
          while (i>0)
          {
               cout<<"delete "<<word1[i-1]<<endl;
               i--;
          }
          while (j>0)
          {
               cout<<"insert "<<word2[j-1]<<endl;
               j--;
          }
          
          
          


          return dp[M][N];
          
          
    }
    int MinOfThreeInt(int a,int b,int c){
          return min(a,min(b,c));
    }

};

int main()
{

     Solution s;
     string s1,s2;
     cin>>s1>>s2;

     cout<<s.minDistance(s1,s2)<<endl;
         
}

