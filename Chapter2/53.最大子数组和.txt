#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
using namespace std;


  


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
          int size_n = nums.size();
          int dp[size_n];
          dp[0]=nums.at(0);
          for(int i=1;i<size_n;i++){
               dp[i]=max(dp[i-1]+nums[i],nums[i]);
          }
          int max_ans = -10001;
          for (int i = 0; i < size_n; i++)
          {
               if(max_ans<dp[i]){max_ans=dp[i];}
          }
          return max_ans;

    }
};

int main()
{

     Solution s;
     vector<int> nums1;
     int n;
     for (int i = 0; i < 5; i++)
     {
          cin>>n;
          nums1.push_back(n);
     }
     cout<<s.maxSubArray(nums1)<<endl;
         
}

//状态压缩版本
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
using namespace std;


  


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
          int size_n = nums.size();

          int dp_i_1=nums.at(0);
          int dp_i;
          int max_ans = dp_i_1;
          for(int i=1;i<size_n;i++){
               
               dp_i=max(dp_i_1+nums[i],nums[i]);
               dp_i_1=dp_i;

               if(max_ans<dp_i){max_ans=dp_i;}
          }
          return max_ans;

    }
};

int main()
{

     Solution s;
     vector<int> nums1;
     int n;
     for (int i = 0; i < 1; i++)
     {
          cin>>n;
          nums1.push_back(n);
     }
     cout<<s.maxSubArray(nums1)<<endl;
         
}

