// 87测试用例 通过85用例
#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
using namespace std;


  


class Solution1{
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
          sort(envelopes.begin(),envelopes.end(),cmp1);//按照宽度增序排序 宽度相同的高度按逆序排列
          /*for (int i = 0; i < envelopes.size(); i++)
          {
               for (int j = 0; j < envelopes[0].size(); j++)
               {
                    cout<<envelopes.at(i).at(j);
               }cout<<endl;
               
          }*/
          vector<int> LIS_vec;//将排好序的二维vector转化为LIS中的num数组
          for(int i=0;i<envelopes.size();i++){
               LIS_vec.push_back(envelopes[i][1]);
          }
          /*for (auto c:LIS_vec)
          {
               cout<<c<<endl;
          }*/
          int dp[LIS_vec.size()];
          for(int i=0;i<LIS_vec.size();i++){dp[i]=1;}//dp数组初始化为1 LIS
          for (int i = 0; i < LIS_vec.size(); i++)//if num[j]>num[i] dp[j]=dp[i]+1
          {
               for (int j = 0; j < i ; j++)
               {
                    if(LIS_vec[i]>LIS_vec[j]){
                         dp[i] = max(dp[i],dp[j]+1);
                    }
                    
               }
               
          }
          int max1 = 1;
          for (int i = 0; i < LIS_vec.size(); i++)
          {
               if(max1<dp[i]){max1 = dp[i];}
          }
          return max1;         

    }
    static bool cmp1(vector<int>&a,vector<int>&b){
          if(a[0]==b[0]){return a[1]>b[1];}
          else{return a[0]<b[0];}
    }
};

int main()
{

     Solution1 S2;
     //string a,b;
     vector<vector<int>> num(4,vector<int>(2,0));
     int ch1,ch2; 
     int i=0;   

 
    
     
    for (int i = 0; i < 4; i++)
    {     
          for (int j = 0; j < 2; j++)
          {
               cin>>num[i][j];
          }
     
    }
    cout<<S2.maxEnvelopes(num);
    
// 5 4 6 4 6 7 2 3
}

//二分版本

class Solution1_mid{
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
          sort(envelopes.begin(),envelopes.end(),cmp1);//按照宽度增序排序 宽度相同的高度按逆序排列
          /*for (int i = 0; i < envelopes.size(); i++)
          {
               for (int j = 0; j < envelopes[0].size(); j++)
               {
                    cout<<envelopes.at(i).at(j);
               }cout<<endl;
               
          }*/
          vector<int> LIS_vec;//将排好序的二维vector转化为LIS中的num数组
          for(int i=0;i<envelopes.size();i++){
               LIS_vec.push_back(envelopes[i][1]);
          }
          /*for (auto c:LIS_vec)
          {
               cout<<c<<endl;
          }*/
          vector<int> top(LIS_vec.size());
          int piles = 0;
          for (int i = 0; i < LIS_vec.size(); i++)
          {
               int poker = LIS_vec.at(i);
               int left=0,right=piles;
               while (left<right)
               {
                    int mid = (left+right)/2;
                    if(top[mid]>poker){
                         right=mid;
                    }
                    else if (top[mid]<poker)
                    {
                         left=mid+1;
                    }
                    else{
                         right=mid;
                    }
                    
               }
               if(left==piles){
                    piles++;
               }
               top[left]=poker;
          }
          return piles;


    }
    static bool cmp1(vector<int>&a,vector<int>&b){
          if(a[0]==b[0]){return a[1]>b[1];}
          else{return a[0]<b[0];}
    }
};
