/**
 * Definition for a binary tree node->
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<TreeNode*,int> memo; 
    int rob(TreeNode* root) {
        if(root==nullptr){
            return 0;
        }
        if(memo.count(root)){
            return memo[root];
        }
        int do_rob = root->val + (root->left == nullptr ? 0 : rob(root->left->left) + rob(root->left->right))
        + (root->right == nullptr ? 0 : rob(root->right->left) + rob(root->right->right));
        int dont_rob = rob(root->left) + rob(root->right);

        int res = max(do_rob,dont_rob);
        memo.insert(pair<TreeNode*,int>(root,res));
        return res;
    }
};