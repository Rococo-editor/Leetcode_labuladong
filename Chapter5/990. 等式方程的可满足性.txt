#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
#include <string.h>
#include <list>
#include <stack>
using namespace std;


class UnionFind{
public:
    int count;
    int *parent;
    int *size;

    UnionFind(int n){
        count = n;
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }
        

    }

    void Union(int p,int q){
        if(find(p)!=find(q)){
            
            if (size[find(p)]<size[find(q)])//平衡树
            {
                parent[find(p)] = find(q);
                size[find(q)] += size[find(p)];//注意size更新
            }
            else{
                parent[find(q)] = find(p);
                size[find(p)] += size[find(q)];
            }
            
            count--;
        }
    }

    bool Connected(int p,int q){
        return find(p)==find(q);
        
    }

    int find(int x){
        while (x!=parent[x])
        {
            parent[x] = parent[parent[x]];//路径压缩
            x = parent[x];
        }
        return x;
        
    }

    int countUnion(){
        return count;
    }


};


class Solution {
public:
    bool equationsPossible(vector<string>& equations) {
        UnionFind u(26);//26小写字母
        for(auto e:equations){//相等的字母连通
            if(e[1]=='='){
                u.Union(e[0]-'a',e[3]-'a');
            }
        }
        for(auto e:equations){
            if(e[1]=='!'){
                if(u.Connected(e[0]-'a',e[3]-'a')){//!=打破了连通性
                    return false;
                }
            }
        }
        return true;
    }
};


int main()
{
}
