class Solution {
public:
    int countPrimes(int n) {//筛子法
        if(n==0){
            return 0;
        }
        bool isPrime[n];
        for(int i=0;i<n;i++){isPrime[i] = true;}

        for (int i = 2; i < n; i++)
        {
            if (isPrime[i])
            {
                for (int j = i*2; j < n; j+=i)
                {
                    isPrime[j] = false;
                }
                
            }
            
        }
        int count = 0;
        for (int i = 2; i < n; i++)
        {
            if (isPrime[i])
            {
                count++;
            }
            
        }
        return count;
        


    }
};


class Solution {
public:
    int countPrimes(int n) {//筛子法 平方优化
        if(n==0){
            return 0;
        }
        bool isPrime[n];
        for(int i=0;i<n;i++){isPrime[i] = true;}

        for (int i = 2; i*i < n; i++)//平方优化
        {
            if (isPrime[i])
            {
                for (int j = i*i; j < n; j+=i)//平方优化 2x 3x ..... （x-1）x之前被2, 3.....(x-1)筛过了 因此从xx开始
                {
                    isPrime[j] = false;
                }
                
            }
            
        }
        int count = 0;
        for (int i = 2; i < n; i++)
        {
            if (isPrime[i])
            {
                count++;
            }
            
        }
        return count;
        


    }
};