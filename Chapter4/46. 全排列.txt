#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
#include <string.h>
#include <list>
#include <stack>
using namespace std;




class Solution {
public:
    vector<vector<int>> ans;
    vector<vector<int>> permute(vector<int>& nums) {
        vector<int> track;
        backtrack(track,nums);
        return ans;

    }
    void backtrack(vector<int>& track,vector<int>& nums){
        if (track.size()==nums.size())
        {
            ans.push_back(track);
            return;
        }
        for (int i = 0; i < nums.size(); i++)
        {
            if (find_vecs(track,nums[i]))
            {
               continue;
            }
            
            track.push_back(nums[i]);
            backtrack(track,nums);
            track.pop_back();
        } 
    }
    bool find_vecs(vector<int> a, int temp){
        vector<int>::iterator it = find(a.begin(),a.end(),temp);
        if (it!=a.end())
        {
            return true;
        }
        return false;
        
    }
};

int main()
{

     
     
     
}
