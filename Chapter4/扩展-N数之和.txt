#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
#include <string.h>
#include <list>
#include <stack>
using namespace std;



class Solution{
public:
    //在调用nSum之前必须要用sort(nums.begin(),nums.end())对nums进行排序 之所以函数内没写sort是因为递归效率比较低
    vector<vector<int>> nSumProblem(vector<int>& nums,int n,int start,long long target){
        vector<vector<int>> res;
        int sz = nums.size();
        if (n<2||nums.size()<n)
        {
            return res;
        }
        if (n==2)
        {
            int L = start;
            int R = nums.size()-1;
            while (L<R)
            {
                long long sum =(long long)(nums[L]+nums[R]);
                int left_num = nums[L];
                int right_num = nums[R];
                if (sum==target)
                {
                    res.push_back({nums[L],nums[R]});
                    while (nums[L]==left_num&&L<R){L++;}
                    while (nums[R]==right_num&&L<R){R--;}
                }
                else if (sum>target)
                {
                    while (nums[R]==right_num&&L<R){R--;}
                }
                else if (sum<target)
                {
                    while (nums[L]==left_num&&L<R){L++;}
                } 
            }
        }
        else{
            for (int i = start; i < sz; i++)
            {
                vector<vector<int>> NSum = nSumProblem(nums,n-1,i+1,(long long)(target-nums[i]));
                for(auto nsm:NSum){
                    nsm.push_back(nums[i]);
                    res.push_back(nsm);
                }
                while (i<sz-1&&nums[i]==nums[i+1])
                {
                    i++;
                }
                
            }
            
        }
        return res;
    }

};

//4Sum 测试用例
//vector<int> nums = {1000000000,1000000000,1000000000,1000000000};
//int target = -294967296;
//output: []


//输入：nums = [1,0,-1,0,-2,2], target = 0
//输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

//输入：nums = [2,2,2,2,2], target = 8
//输出：[[2,2,2,2]]
int main()
{
    Solution s;
    vector<int> nums = {2,2,2,2,2};
    int target = 8;
    sort(nums.begin(),nums.end());
    vector<vector<int>> anss = s.nSumProblem(nums,4,0,target);
    for (int i = 0; i < anss.size(); i++)
    {
        for (int j = 0; j < anss[i].size(); j++)
        {
            cout<<anss[i][j]<<" ";
        }cout<<endl;
        
    }
    
    

}
