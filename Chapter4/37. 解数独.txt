#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
#include <string.h>
#include <list>
#include <stack>
using namespace std;



class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        bool ans = backtrack(board,0,0);
        
    }
    bool backtrack(vector<vector<char>>& board,int i,int j){

        if (i==board.size())
        {
            return true;
        }
        
        if (j==board[i].size())//遍历完一行
        {           
            return backtrack(board,i+1,0);;
        }

        
        
        if (board[i][j]!='.')//数字 则继续遍历下一个
        {
            return backtrack(board,i,j+1);;
        }
        for (char ch = '1'; ch <= '9'; ch++)//若该位置的ch为 . 则枚举
        {
            if(!isValid(ch,i,j,board)){//非法
                continue;
            }
            board[i][j] = ch;
            if(backtrack(board,i,j+1)){
                return true;
            }
            
            board[i][j] = '.';

        }
        return false;
        
        
    }
    bool isValid(char ch,int row,int col,vector<vector<char>>& board){
        for(int i=0;i<board.size();i++){
            if (ch==board[i][col])
            {
                return false;
            }
            
        }
        for (int i = 0; i <board[row].size(); i++)
        {
            if (ch==board[row][i])
            {
                return false;
            }
            
        }
        for(int i=0;i<board.size()/3;i++){
            for (int j = 0; j <board[i].size()/3; j++)
            {
                if (ch==board[(row/3)*3+i][(col/3)*3+j])
                {
                    return false;
                }
            }        
        }
        
        
        
        return true;

        
    }
};
void modifi_b(vector<vector<char>>& c){
    c[0][0] = '1';
}
int main()
{
       
                
       
     vector<vector<char>> b{
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
     };
     Solution s;
     s.solveSudoku(b);
     for (int i = 0; i < 9; i++)
     {
        for (int j = 0; j < 9; j++)
        {
           cout<<b[i][j];
        }
        cout<<endl;
        
     }

     
     
     
     
}
