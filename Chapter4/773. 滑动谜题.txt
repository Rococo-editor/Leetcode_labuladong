#include <iostream>
#include <queue>
#include <string>
#include <algorithm>
#include <unordered_set>
#include <vector>
#include <unordered_map>
#include <cmath>
#include <stdio.h>
#include <cstdio>
#include <string.h>
#include <list>
#include <stack>
using namespace std;



class Solution {
public:
    vector<vector<int>> neighbors = {
        {1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}
    };
    int slidingPuzzle(vector<vector<int>>& board) {
        int m = 2;
        int n = 3;
        string start;
        string target = "123450";
        for (int i = 0; i < m; i++)
        {
            for (int j = 0; j < n; j++)
            {
                start.push_back(board[i][j]+'0');//注意转换成char
            }
            
        }

        queue<string> q;
        unordered_set<string> vis_set;
        q.push(start);
        vis_set.insert(start);
        
        int step = 0;
        while (!q.empty())
        {
            int sz = q.size();
            for (int i = 0; i < sz; i++)
            {
                string curr = q.front();
                q.pop();

                if (target==curr)
                {
                    return step;
                }

                int UND = 0;//0所在的位置
                for (int i = 0; i < curr.size(); i++)
                {
                    if (curr[i]=='0')
                    {
                        UND = i;//找到0所在的位置
                        break;
                    }
                    
                }
                for (int i = 0; i < neighbors[UND].size(); i++)
                {
                    string new_status = curr;
                    swap(new_status[neighbors[UND][i]],new_status[UND]);

                    if (!vis_set.count(new_status))
                    {
                        q.push(new_status);
                        vis_set.insert(new_status);
                    }
                    
                }
                

                
                
            }
            step++;
            
        }
        return -1;
        

        

    }
};
int main()
{
       

}
